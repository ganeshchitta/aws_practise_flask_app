Resources:
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ApiGatewayPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - "apigateway:*"
                Resource:
                  - !Sub arn:aws:lambda:ap-south-1:${AWS::AccountId}:function:copy-to-dynamodb
                  - "arn:aws:apigateway:*"
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: flask_trigger_api
      EndpointConfiguration:
        Types:
          - REGIONAL
  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: flaskresource1
      RestApiId: !Ref MyApi
  MyApiResourceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref MyApiResource
      RestApiId: !Ref MyApi
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/${ApiToDynamodb.Arn}/invocations
#       credentials: !GetAtt APIGatewayExecutionRole.Arn
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: !Join
                - ''
                - - '{'
                  - '"message": "Success"'
                  - '}'
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            SelectionPattern: '.*"statusCode":400.*'
            ResponseTemplates:
              application/json: !Join
                - ''
                - - '{'
                  - '"message": "Bad Request"'
                  - '}'
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.header.Origin: true

  MyApiGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      RestApiId: !Ref MyApi
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sortkey
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sortkey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: flask-app-data

  ApiToDynamodb:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: "sourcebucketflask"
        S3Key: "copytodynamodbcode.zip"
      FunctionName: "copy-to-dynamodb"
      Handler: copy_post_data_to_dynamodb.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt MyLambdaRoles.Arn
      Layers:
        - !Ref MyLambdaLayers
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref MyDynamoDBTable

  MyLambdaLayers:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: "sourcebucketflask"
        S3Key: "dependencies.zip"
      CompatibleRuntimes:
        - python3.9
      Description: 'My flask Layer1'
      LayerName: 'my-flask-python-layer'

  MyLambdaRoles:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "flask-lambda-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "all-resource-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "dynamodb:*"
                  - "apigateway:*"
                Resource:
                  - "arn:aws:apigateway:::*"
                  - "arn:aws:dynamodb:::*"
                  - "arn:aws:logs:*:*:*"
                  - "arn:aws:apigateway:*"
  MyLambdaFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
    - MyApi
    - ApiToDynamodb
    Properties:
      FunctionName: !Ref ApiToDynamodb
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/POST/flaskresource1"

  MyDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApi
      StageName: dev

#Outputs:
#  MyApiEndpoint:
#    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/flask1"
