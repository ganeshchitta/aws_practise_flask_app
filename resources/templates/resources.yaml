Parameters:
  custom_stack_id:
    Description: stack id of a user
    Type: String
    Default: "101"
  environment:
    Description: working environment
    Type: String
    Default: "local"

Resources:
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn:Sub: flask-api-gateway-role-{custom_stack_id}-{environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ApiGatewayPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - "apigateway:*"
                Resource:
                  - !Sub arn:aws:lambda:ap-south-1:${AWS::AccountId}:function:copy-to-dynamodb
                  - "arn:aws:apigateway:*"
  FlaskApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn:Sub: flask-rest-api-{custom_stack_id}-{environment}"
      EndpointConfiguration:
        Types:
          - REGIONAL
  FlaskApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt FlaskApi.RootResourceId
      PathPart: flaskresource1
      RestApiId: !Ref FlaskApi
  FlaskApiResourceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref FlaskApiResource
      RestApiId: !Ref FlaskApi
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/${FlaskLambdaApiToDynamodb.Arn}/invocations
#       credentials: !GetAtt APIGatewayExecutionRole.Arn
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: !Join
                - ''
                - - '{'
                  - '"message": "Success"'
                  - '}'
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          - StatusCode: '400'
            SelectionPattern: '.*"statusCode":400.*'
            ResponseTemplates:
              application/json: !Join
                - ''
                - - '{'
                  - '"message": "Bad Request"'
                  - '}'
            ResponseParameters:
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.Access-Control-Allow-Origin: "'*'"
        - StatusCode: '400'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Content-Type: true
            method.response.header.Access-Control-Allow-Origin: "'*'"
      RequestParameters:
        method.request.header.Origin: true

  FlaskApiGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      RestApiId: !Ref FlaskApi
  FlaskDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sortkey
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sortkey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: 
        Fn:Sub: flask-app-table-data-{custom_stack_id}-{environment}

  FlaskLambdaApiToDynamodb:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 
          Fn:Sub: flask-sourcebucketflask-{custom_stack_id}-{environment}
        S3Key: "flask-lambda-copy-to-dynamodb.zip"
      FunctionName: 
        Fn:Sub: flask-lambda-copy-to-dynamodb-{custom_stack_id}-{environment}
      Handler: flask_lambda_copy_data_to_dynamodb.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt FlaskLambdaRoles.Arn
      Layers:
        - !Ref FlaskLambdaLayers
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref FlaskDynamoDBTable

  FlaskLambdaLayers:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: 
          Fn:Sub: flask-sourcebucketflask-{custom_stack_id}-{environment}
        S3Key: "flask-dependencies-lambda-layer.zip"
      CompatibleRuntimes:
        - python3.9
      Description: 'My flask Layer1'
      LayerName: 
        Fn:Sub: flask-lambda-layer-{custom_stack_id}-{environment}

  FlaskLambdaRoles:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 
        Fn:Sub: flask-lambda-execution-role-{custom_stack_id}-{environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "all-resource-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "dynamodb:*"
                  - "apigateway:*"
                Resource:
                  - "arn:aws:apigateway:::*"
                  - "arn:aws:dynamodb:::*"
                  - "arn:aws:logs:*:*:*"
                  - "arn:aws:apigateway:*"
  MyLambdaFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
    - FlaskApi
    - FlaskLambdaApiToDynamodb
    Properties:
      FunctionName: !Ref FlaskLambdaApiToDynamodb
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FlaskApi}/*/POST/flaskresource1"

  MyDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref FlaskApi
      StageName: dev

#Outputs:
#  FlaskApiEndpoint:
#    Value: !Sub "https://${FlaskApi}.execute-api.${AWS::Region}.amazonaws.com/dev/flask1"
