Parameters:
  customstackid:
    Description: stack id of a user
    Type: String
    Default: "101"
  environment:
    Description: working environment
    Type: String
    Default: "local"

Resources:
  FlaskLambdaRoles:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        !Sub flask-lambda-role-${customstackid}-${environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "all-resource-access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
#                  - "logs:CreateLogGroup"
#                  - "logs:CreateLogStream"
#                  - "logs:PutLogEvents"
                  - "dynamodb:*"
                Resource:
                   - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/flask-app-table-data-${customstackid}-${environment}
#                  - "arn:aws:logs:*:*:*"
#                  - "*"
  FlaskDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: sortkey
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: sortkey
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: 
        !Sub flask-app-table-data-${customstackid}-${environment}
  MyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        !Sub flask-api-lambda-trigger-${customstackid}-${environment}

  MyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApi
      ParentId: !GetAtt MyApi.RootResourceId
      PathPart: myresource

  MyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApi
      ResourceId: !Ref MyResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/${FlaskLambdaApiToDynamodb.Arn}/invocations

  MyDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MyMethod
    Properties:
      RestApiId: !Ref MyApi
  MyStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId: !Ref MyApi
      DeploymentId: !Ref MyDeployment

  FlaskLambdaApiToDynamodb:
    # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 
          !Sub flask-sourcebucketflask-${customstackid}-${environment}
        S3Key: "flask-lambda-copy-to-dynamodb.zip"
      FunctionName: 
        !Sub flask-lambda-copy-to-dynamodb-${customstackid}-${environment}
      Handler: flask_lambda_copy_data_to_dynamodb.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Role: !GetAtt FlaskLambdaRoles.Arn
      Layers:
        - !Ref FlaskLambdaLayers
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref FlaskDynamoDBTable

  FlaskLambdaLayers:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: 
          !Sub flask-sourcebucketflask-${customstackid}-${environment}
        S3Key: "flask-dependencies-lambda-layer.zip"
      CompatibleRuntimes:
        - python3.9
      Description: 'My flask Layer1'
      LayerName: 
        !Sub flask-lambda-layer-${customstackid}-${environment}

  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: FlaskLambdaApiToDynamodb
    Properties:
      FunctionName: !Sub flask-lambda-copy-to-dynamodb-${customstackid}-${environment}
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApi}/*/*/*"


Outputs:
  ApiEndpoint:
    Description: Endpoint URL of the deployed API
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
